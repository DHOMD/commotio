#!/bin/bash
#
# Squish a Vanir otapackage for distribution
# credit for original version: CM
#

export ANDROID_BUILD_TOP=$ANDROID_BUILD_TOP

. $ANDROID_BUILD_TOP/vendor/vanir/tools/functions

if [ -z "$OUT" -o ! -d "$OUT" ]; then
    echo -e $CL_RED"ERROR: $0 only works with a full build environment. $OUT should exist."$CL_RST
    exit 1
fi

OTAPACKAGE=$OTA_PACKAGE_PATH

if [ ! -f "$OTAPACKAGE" ]; then
    echo -e $CL_RED"$OTAPACKAGE doesn't exist!"$CL_RST;
    exit 1
fi

QUIET=-q

REPACK=$OUT/repack.d
printf "Sanitizing environment..."
rm -rf $REPACK
mkdir -p $REPACK
echo

# Unpack the otapackage and opticharge all apks
mkdir $REPACK/ota
(
cd $REPACK/ota
printf "Unpacking $OTAPACKAGE..."
unzip $QUIET $OTAPACKAGE
ln -s  $OUT/data $REPACK/ota/data
echo

# Move all apks to the same directory so xargs can
# use also with framework-res.apk. This allow process
# framework-res.apk in parallel with other apks
mkdir -p $REPACK/parallel
cd $REPACK/parallel
find $REPACK/ota/system -name '*.apk' | while read APK; do
    ln -s $APK .
done

find ./ -name \*.apk | $HALFXARGS schedtool -B -n 1 -e ionice -n 1 $OPTICHARGER

# Return to directory
cd $REPACK/ota
rm -rf $REPACK/parallel
)

# move utilities
[ -e $OUT/utilities ] && cp $OUT/utilities/* $REPACK/ota/system/xbin/

# No need for recovery
rm -rf $REPACK/ota/recovery
rm -rf $REPACK/ota/system/etc/install-recovery.sh

# Determine what to name the new signed package
GOOROM=`sed -n -e'/ro\.goo\.rom/s/^.*=//p' $OUT/system/build.prop`
GOOVERSION=`sed -n -e'/ro\.goo\.version/s/^.*=//p' $OUT/system/build.prop`
MODVERSION=`sed -n -e'/ro\.modversion/s/^.*=//p' $OUT/system/build.prop`
OUTVERSION=B"$GOOVERSION"-"$GOOROM"
OUTFILE=$OUT/$OUTVERSION.zip

# Pack it up and sign
echo -e $CL_CYN"Zipping package..."$CL_RST
( cd $REPACK/ota; zip $QUIET -r $REPACK/update.zip . )
echo ""
echo -e $CL_CYN"Signing package..."$CL_RST
SECURITYDIR=$ANDROID_BUILD_TOP/build/target/product/security
java -Xmx2048m \
    -jar $ANDROID_BUILD_TOP/out/host/$OUT_TARGET_HOST/framework/signapk.jar \
    -w $SECURITYDIR/testkey.x509.pem $SECURITYDIR/testkey.pk8 \
    $REPACK/update.zip $OUTFILE
echo ""
echo -e $CL_CYN"Cleaning up..."$CL_RST
rm -rf $REPACK
echo

# Create a md5 checksum image of the repacked package
(
img=`basename $OUTFILE`
cd `dirname $OUTFILE`
$MD5 $img >$img.md5sum
ZIPSIZE=`ls -lah $OUTFILE | awk '{ print $5}' `
echo ""
echo -e $CL_CYN"Package complete:"$CL_MAG" $OUTFILE"$CL_RST
echo -e $CL_BLU"Package Size: "$CL_YLW"$ZIPSIZE "
echo -e $CL_CYN"md5:"$CL_MAG" $(cat $img.md5sum | awk '{ print $1 }')"$CL_RST
echo ""
)

exit 0
